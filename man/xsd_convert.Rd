% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/xsd_convert.R
\name{xsd_convert}
\alias{xsd_convert}
\alias{xsd_convert.data.frame}
\alias{xsd_convert.dataset_df}
\alias{xsd_convert.tbl_df}
\alias{xsd_convert.character}
\alias{xsd_convert.numeric}
\alias{xsd_convert.haven_labelled_defined}
\alias{xsd_convert.integer}
\alias{xsd_convert.logical}
\alias{xsd_convert.factor}
\alias{xsd_convert.POSIXct}
\alias{xsd_convert.Date}
\alias{xsd_convert.difftime}
\title{Convert to XML Schema Definition (XSD) Types}
\usage{
xsd_convert(x, idcol, ...)

\method{xsd_convert}{data.frame}(x, idcol = NULL, ...)

\method{xsd_convert}{dataset_df}(x, idcol = "rowid", ...)

\method{xsd_convert}{tbl_df}(x, idcol = NULL, ...)

\method{xsd_convert}{character}(x, idcol = NULL, ...)

\method{xsd_convert}{numeric}(x, idcol = NULL, ...)

\method{xsd_convert}{haven_labelled_defined}(x, idcol = NULL, ...)

\method{xsd_convert}{integer}(x, idcol = NULL, ...)

\method{xsd_convert}{logical}(x, idcol = NULL, ...)

\method{xsd_convert}{factor}(x, idcol = NULL, ...)

\method{xsd_convert}{POSIXct}(x, idcol = NULL, ...)

\method{xsd_convert}{Date}(x, idcol = NULL, ...)

\method{xsd_convert}{difftime}(x, idcol = NULL, ...)
}
\arguments{
\item{x}{An object (e.g., vector, data frame) to be coerced to XSD-typed
string format.}

\item{idcol}{The name or position of the column that contains the row
(observation) identifiers. If \code{NULL}, a new identifier column will be
generated using \code{\link[=row.names]{row.names()}}.}

\item{...}{Additional arguments passed to methods.}
}
\value{
A character vector of RDF-compatible typed literals. Each element
corresponds to an input value, serialized according to its type (e.g.,
\code{xs:string}, \code{xs:integer}, \code{xs:dateTime}).

For data frames or tibbles, each row is converted into a set of RDF
triples, with columns mapped to predicates.
}
\description{
Converts the numeric, logical, and date/time columns of a dataset into \href{https://www.w3.org/TR/xmlschema11-2/}{XML Schema Definition (XSD)} compatible
string representations such as \code{xs:decimal}, \code{xs:boolean}, \code{xs:date}, and
\code{xs:dateTime}.
}
\examples{
# Example usage with a simple data frame
df <- data.frame(
  id = 1:2,
  value = c(3.14, 2.71),
  active = c(TRUE, FALSE),
  date = as.Date(c("2020-01-01", "2020-12-31"))
)
as_xsd(df, idcol = "id")

# Convert a regular data.frame to XSD-typed RDF-compatible literals
xsd_convert(data.frame(a = 1:3, b = c("a", "b", "c")))

# Convert a dataset_df object to XSD-typed RDF-compatible literals
xsd_convert(head(dataset_df(orange_df)))

# Convert a tibble to XSD-typed RDF-compatible literals
library(tibble)
xsd_convert(tibble(a = 1:3, b = c("x", "y", "z")))

# Convert character vector to XSD-typed literals
xsd_convert(c("apple", " banana ", "cherry"))

# Preprocess whitespace before conversion
xsd_convert(trimws(c("apple", " banana ", "cherry"), which = "both"))

# Convert numeric values (integers or doubles) to XSD typed literals
xsd_convert(1:3)

# Convert haven_labelled_defined vectors to XSD typed literals
x <- haven::labelled_spss(c(1, 0, 1), labels = c(Yes = 1, No = 0))
x <- defined(x, concept = "https://example.org/concept", datatype = "xs:boolean")
xsd_convert(x)

# Convert integer values to XSD typed literals
xsd_convert(as.integer(c(10, 20, 30)))

# Convert boolean values to XSD typed literals
xsd_convert(c(TRUE, FALSE))

# Convert factors to XSD typed literals
xsd_convert(factor(c("apple", "banana", "cherry")))

# With a custom codelist prefix
x <- factor(c("apple", "banana", "cherry"))
xsd_convert(x, codelist = "fruit")

# Convert POSIXct timestamps to XSD dateTime literals
times <- as.POSIXct(
  c(
    "2021-01-01 12:00:00",
    "2022-06-15 08:30:00"
  ),
  tz = "UTC"
)
xsd_convert(times)

# Convert Date values to XSD date literals
dates <- as.Date(c(
  "2020-01-01",
  "2021-12-31"
))
xsd_convert(dates)

# Convert time differences to XSD duration format
xsd_convert(as.difftime(c(3600, 5400), units = "secs"))

}
